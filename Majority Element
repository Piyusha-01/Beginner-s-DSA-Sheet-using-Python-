Majority Element
Given an array A of N elements. Find the majority element in the array. A majority element in an array A of size N is an element that appears strictly more than N/2 times in the array.
Example 1:
Input:
N = 3 
A[] = {1,2,3} 
Output:
-1
Explanation:
Since, each element in 
{1,2,3} appears only once so there 
is no majority element.
Example 2:
Input:
N = 5 
A[] = {3,1,3,3,2} 
Output:
3
Explanation:
Since, 3 is present more
than N/2 times, so it is 
the majority element.
Your Task:
The task is to complete the function majorityElement() which returns the majority element in the array. If no majority exists, return -1.
Expected Time Complexity: O(N).
Expected Auxiliary Space: O(1).



solutions:
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    def majorityElement(self, A, N):
        #Your code here
        map = dict()
        majority_element = dict()
        if N == 1:
            return A[0]
        for i in A:
            if i in map:
                map[i] += 1
                if map[i] > N/2 :
                    majority_element[i] = map[i]
                    
            else:
                map[i] = 1
        if len(majority_element) == 0:
            return -1
        else:
            max = -99999
            element = 0
            for i in majority_element.keys():
                if majority_element[i] > max:
                    max = majority_element[i]
                    element = i
            return element
