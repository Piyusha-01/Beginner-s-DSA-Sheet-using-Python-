K Sized Subarray Maximum
Given an array arr[] of size N and an integer K. Find the maximum for each and every contiguous subarray of size K.
Example 1:
Input:
N = 9, K = 3
arr[] = 1 2 3 1 4 5 2 3 6
Output: 
3 3 4 5 5 5 6 
Explanation: 
1st contiguous subarray = {1 2 3} Max = 3
2nd contiguous subarray = {2 3 1} Max = 3
3rd contiguous subarray = {3 1 4} Max = 4
4th contiguous subarray = {1 4 5} Max = 5
5th contiguous subarray = {4 5 2} Max = 5
6th contiguous subarray = {5 2 3} Max = 5
7th contiguous subarray = {2 3 6} Max = 6
Example 2:
Input:
N = 10, K = 4
arr[] = 8 5 10 7 9 4 15 12 90 13
Output: 
10 10 10 15 15 90 90
Explanation: 
1st contiguous subarray = {8 5 10 7}, Max = 10
2nd contiguous subarray = {5 10 7 9}, Max = 10
3rd contiguous subarray = {10 7 9 4}, Max = 10
4th contiguous subarray = {7 9 4 15}, Max = 15
5th contiguous subarray = {9 4 15 12}, 
Max = 15
6th contiguous subarray = {4 15 12 90},
Max = 90
7th contiguous subarray = {15 12 90 13}, 
Max = 90
Your Task:  
You dont need to read input or print anything. Complete the function max_of_subarrays() which takes the array, N and K as input parameters and returns a list of integers 
denoting the maximum of every contiguous subarray of size K.
Expected Time Complexity: O(N)
Expected Auxiliary Space: O(k)
Constraints:
1 ≤ N ≤ 106
1 ≤ K ≤ N
0 ≤ arr[i] ≤ 109


solution:
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
general approach:
def max_of_subarrays(self, arr, n, k):
            m = []
            for i in range(n - k + 1):
                m.append(max(arr[i:i + k]))
            return m
windowing approach:
class Solution:
    def max_of_subarrays(self, arr, n, k):
        # Initialize deque and result list
        dq = deque()
        result = []
        # Process the first k elements (first window)
        for i in range(k):
            while dq and arr[i] >= arr[dq[-1]]:
                dq.pop()
            dq.append(i)
        # Process the rest of the elements
        for i in range(k, n):
            # Append the max of the previous window
            result.append(arr[dq[0]])
            # Remove elements not in the current window
            while dq and dq[0] <= i - k:
                dq.popleft()
            # Remove all elements smaller than the currently being added element (arr[i])
            while dq and arr[i] >= arr[dq[-1]]:
                dq.pop()
            # Add current element at the end of the deque
            dq.append(i)
    # Add the maximum for the last window
        result.append(arr[dq[0]])
        return result
